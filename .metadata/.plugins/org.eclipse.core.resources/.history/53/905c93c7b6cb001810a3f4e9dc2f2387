/**
 * Copyright &copy; 2012-2016 <a href="https://github.com/thinkgem/jeesite">JeeSite</a> All rights reserved.
 */
package cn.edu.ccnu.imd.jwcmis.web;

import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.ConstraintViolationException;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.google.common.collect.Lists;
import com.thinkgem.jeesite.common.beanvalidator.BeanValidators;
import com.thinkgem.jeesite.common.config.Global;
import com.thinkgem.jeesite.common.persistence.Page;
import com.thinkgem.jeesite.common.web.BaseController;
import com.thinkgem.jeesite.modules.sys.utils.DictUtils;
import com.thinkgem.jeesite.modules.sys.utils.UserUtils;
import com.thinkgem.jeesite.common.utils.DateUtils;
import com.thinkgem.jeesite.common.utils.StringUtils;
import com.thinkgem.jeesite.common.utils.excel.ExportExcel;
import com.thinkgem.jeesite.common.utils.excel.ImportExcel;

import cn.edu.ccnu.imd.jwcmis.entity.Student;
import cn.edu.ccnu.imd.jwcmis.service.StudentService;

/**
 * 学生信息管理Controller
 * @author 黑白
 * @version 2018-09-23
 */
@Controller
@RequestMapping(value = "${adminPath}/jwcmis/student")
public class StudentController extends BaseController {

	@Autowired
	private StudentService studentService;
	
	@ModelAttribute
	public Student get(@RequestParam(required=false) String id) {
		Student entity = null;
		if (StringUtils.isNotBlank(id)){
			entity = studentService.get(id);
		}
		if (entity == null){
			entity = new Student();
		}
		return entity;
	}
	
	@RequiresPermissions("jwcmis:student:view")
	@RequestMapping(value = {"list", ""})
	public String list(Student student, HttpServletRequest request, HttpServletResponse response, Model model) {
		if(UserUtils.getUser().getRole().getId().endsWith("student")) {
			student.setPhone(UserUtils.getUser().getId());
		}
		
		Page<Student> page = studentService.findPage(new Page<Student>(request, response), student); 
		model.addAttribute("page", page);
		return "imd/jwcmis/studentList";
	}

	@RequiresPermissions("jwcmis:student:view")
	@RequestMapping(value = "form")
	public String form(Student student, Model model) {
		model.addAttribute("student", student);
		return "imd/jwcmis/studentForm";
	}

	@RequiresPermissions("jwcmis:student:edit")
	@RequestMapping(value = "save")
	public String save(Student student, Model model, RedirectAttributes redirectAttributes) {
		if (!beanValidator(model, student)){
			return form(student, model);
		}
		studentService.save(student);
		addMessage(redirectAttributes, "保存学生信息成功");
		return "redirect:"+Global.getAdminPath()+"/jwcmis/student/?repage";
	}
	
	@RequiresPermissions("jwcmis:student:edit")
	@RequestMapping(value = "delete")
	public String delete(Student student, RedirectAttributes redirectAttributes) {
		studentService.delete(student);
		addMessage(redirectAttributes, "删除学生信息成功");
		return "redirect:"+Global.getAdminPath()+"/jwcmis/student/?repage";
	}
	//checkRepeat邮箱、手机号
		@ResponseBody  
		@RequiresPermissions("jwcmis:student:edit")
		@RequestMapping(value = "checkRepeat")
		public String checkRepeat(String checkString) {
			Student student = new Student();
			String result = "0";
			if("".equals(checkString) || checkString.equals(null)) {
				result = "-1";
				return result;
			}
			//获取expert现有数据
			List<Student> list = studentService.findList(student);
			//遍历查重，一旦重复就break跳出循环，直接返回
			for(Student e:list) {
				if(checkString.equals(e.getEmail())) {						//邮箱查重
					result = "1";
					break;
				} 
				if(checkString.equals(e.getPhone())) {				//手机号查重
					result = "2";
					break;
				}
			}
			
			return result;
		}
		
		
		/**
		 * 导入学生信息数据
		 * 
		 * @param file
		 * @param redirectAttributes
		 * @return
		 */
		@RequiresPermissions("jwcmis:student:view")
		@RequestMapping(value = "import", method = RequestMethod.POST)
		public String importFile(MultipartFile file, RedirectAttributes redirectAttributes) {
			if (Global.isDemoMode()) {
				addMessage(redirectAttributes, "演示模式，不允许操作！");
				return "redirect:" + adminPath + "/jwcmis/student/?repage";
			}
			try {
				int successNum = 0;
				int failureNum = 0;
				StringBuilder failureMsg = new StringBuilder();
				ImportExcel ei = new ImportExcel(file, 1, 0);
				List<Student> list = ei.getDataList(Student.class);
				 //导入到thesis开始
				for (Student student : list) {
					try {
						//查重、判断是否为空
						if(checkRepeat(student.getEmail()).equals("0")&&checkRepeat(student.getPhone()).equals("0")
								&& studentService.importCheckRepeat(student)) {
								studentService.save(student);
								successNum++;
						}
						
					} catch (ConstraintViolationException ex) {
						failureMsg.append("<br/>姓名 " + student.getName() + " 导入失败：");
						List<String> messageList = BeanValidators.extractPropertyAndMessageAsList(ex, ": "); // 告诉你出错原因
						for (String message : messageList) {
							failureMsg.append(message + "; ");
							failureNum++;
						}
					} catch (Exception ex) {
						failureMsg.append("<br/>姓名 " + student.getName() + " 导入失败：" + ex.getMessage());
					}
				}
				// 导入到thesis结束
				if (failureNum > 0) {
					failureMsg.insert(0, "，失败 " + failureNum + " 条信息，导入信息如下：");
				}
				addMessage(redirectAttributes, "已成功导入 " + successNum + " 条信息" + failureMsg);
			} catch (Exception e) {
				//addMessage(redirectAttributes, "导入论文信息失败！失败信息：" + e.getMessage());
				addMessage(redirectAttributes, "导入论文信息失败！失败信息：" + e.getMessage());
			}
			return "redirect:" + adminPath + "/jwcmis/student/list?repage";
		}
		/**
		 * 下载导入用户数据模板
		 * 
		 * @param response
		 * @param redirectAttributes
		 * @return
		 */
		@RequiresPermissions("jwcmis:student:view")
		@RequestMapping(value = "import/template")
		public String importFileTemplate(HttpServletResponse response, RedirectAttributes redirectAttributes) {
			try {
				String fileName = "学生信息数据导入模板.xlsx";
				List<Student> list = Lists.newArrayList();
				new ExportExcel("学生信息数据", Student.class, 2).setDataList(list).write(response, fileName).dispose();
				return null;
			} catch (Exception e) {
				addMessage(redirectAttributes, "导入模板下载失败！失败信息：" + e.getMessage());
			}
			return "redirect:" + adminPath + "/jwcmis/student/list?repage";
		}
		/**
		 * 导出学生信息数据
		 * @param jwcmis
		 * @param request
		 * @param response
		 * @param redirectAttributes
		 * @return
		 */
		@RequiresPermissions("jwcmis:student:view")
	    @RequestMapping(value = "export", method=RequestMethod.POST)
	    public String exportFile(Student student, HttpServletRequest request, HttpServletResponse response, RedirectAttributes redirectAttributes) {
			try {
	            String fileName = "学生信息数据"+DateUtils.getDate("yyyyMMddHHmmss")+".xlsx";
	            Page<Student> page = studentService.findPage(new Page<Student>(request, response, -1), student);
	    		new ExportExcel("学生信息数据", Student.class).setDataList(page.getList()).write(response, fileName).dispose();
	    		return null;
			} catch (Exception e) {
				addMessage(redirectAttributes, "导出学生信息失败！失败信息："+e.getMessage());
			}
			return "redirect:" + adminPath + "/jwcmis/student/?repage";
	    }
		
}