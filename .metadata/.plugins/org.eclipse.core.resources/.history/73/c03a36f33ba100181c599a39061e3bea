/**
 * Copyright &copy; 2012-2016 <a href="https://github.com/thinkgem/jeesite">JeeSite</a> All rights reserved.
 */
package cn.edu.ccnu.imd.gsmis.web;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.swing.text.html.parser.ParserDelegator;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.google.common.collect.Lists;
import com.thinkgem.jeesite.common.config.Global;
import com.thinkgem.jeesite.common.persistence.Page;
import com.thinkgem.jeesite.common.web.BaseController;
import com.thinkgem.jeesite.common.utils.StringUtils;
import cn.edu.ccnu.imd.gsmis.entity.Email;
import cn.edu.ccnu.imd.gsmis.service.EmailService;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import javax.activation.DataHandler;
import javax.activation.FileDataSource;
import javax.mail.Address;
import javax.mail.Message;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;

import javax.swing.text.html.HTMLEditorKit;
import javax.swing.text.html.parser.ParserDelegator;






/**
 * 邮件模板管理Controller
 * @author cgq
 * @version 2018-08-13
 */
@Controller
@RequestMapping(value = "${adminPath}/gsmis/email")
public class EmailController extends BaseController {

	@Autowired
	private EmailService emailService;
	
	@ModelAttribute
	public Email get(@RequestParam(required=false) String id) {
		Email entity = null;
		if (StringUtils.isNotBlank(id)){
			entity = emailService.get(id);
		}
		if (entity == null){
			entity = new Email();
		}
		return entity;
	}
	
	@RequiresPermissions("gsmis:email:view")
	@RequestMapping(value = {"list", ""})
	public String list(Email email, HttpServletRequest request, HttpServletResponse response, Model model) {
		Page<Email> page = emailService.findPage(new Page<Email>(request, response), email); 
		model.addAttribute("page", page);
		return "imd/gsmis/emailList";
	}

	@RequiresPermissions("gsmis:email:view")
	@RequestMapping(value = "form")
	public String form(Email email, Model model) {
		model.addAttribute("email", email);
		if(email.getText()==null || "".equals(email.getText())) {
			email.setText("<p>\n" + 
					"	尊敬的<strong><span style=\"color:#ff0000;\">{1}</span></strong>您好</p>\n" + 
					"<p style=\"text-indent:20pt;\">\n" + 
					"	您所审批的论文账号为<span style=\"color:#ff0000;\">{2}</span>，密码为<span style=\"color:#ff0000;\">{3}</span>，请尽快点击网址<span style=\"color:#ff0000;\">{4}</span>进行审批</p>\n" + 
					"<p style=\"text-indent:20pt;\">\n" + 
					"	此致</p>\n" + 
					"<p style=\"text-indent:20pt;\">\n" + 
					"	华中师范大学</p>");
		}
		
		return "imd/gsmis/emailForm";
	}

	@RequiresPermissions("gsmis:email:edit")
	@RequestMapping(value = "save")
	public String save(Email email, Model model, RedirectAttributes redirectAttributes) {
		if (!beanValidator(model, email)){
			return form(email, model);
		}
		
		emailService.save(email);
		addMessage(redirectAttributes, "保存邮件模板成功");
		return "redirect:"+Global.getAdminPath()+"/gsmis/email/?repage";
	}
	
	@RequiresPermissions("gsmis:email:edit")
	@RequestMapping(value = "delete")
	public String delete(Email email, RedirectAttributes redirectAttributes) {
		emailService.delete(email);
		addMessage(redirectAttributes, "删除邮件模板成功");
		return "redirect:"+Global.getAdminPath()+"/gsmis/email/?repage";
	}
	
	@RequiresPermissions("gsmis:email:view")
	@RequestMapping(value = {"fasong"})
	public String fasong(Email email, HttpServletRequest request, HttpServletResponse response, Model model)throws Exception {
		 Properties props = new Properties();

	        // 开启debug调试
	        props.setProperty("mail.debug", "true");
	        // 发送服务器需要身份验证
	        props.setProperty("mail.smtp.auth", "true");
	        // 设置邮件服务器主机名
	        props.setProperty("mail.host", "smtp.163.com");
	        // 发送邮件协议名称
	        props.setProperty("mail.transport.protocol", "smtp");

	        Session session = Session.getInstance(props);

	        Message msg = new MimeMessage(session);
	        msg.setSubject("张绍燚调试邮箱");
	        /**
	         * 邮箱内容
	         */
	        StringBuilder builder = new StringBuilder();
	        List<Email> list = emailService.findList(email);
	        builder.append(email.getText());
	        String text = Html2Text.getContent(email.getText());
	        builder.append(text);
	      
	       

	        msg.saveChanges();
	        msg.setText(builder.toString());
	        msg.setFrom(new InternetAddress("a2016214291@163.com"));

	        Transport transport = session.getTransport();
	        transport.connect("smtp.163.com", "a2016214291@163.com", "a2016214291");

	        transport.sendMessage(msg, new Address[] { new InternetAddress(
	                "2487112602@qq.com") });
	        transport.close();
	    	    
	        return "imd/gsmis/emailList";
	}
	public static MimeBodyPart createContent(String body, String fileName)
            throws Exception {
        // 用于保存最终正文部分
        MimeBodyPart contentBody = new MimeBodyPart();
        // 用于组合文本和图片，"related"型的MimeMultipart对象
        MimeMultipart contentMulti = new MimeMultipart("related");

        // 正文的文本部分
        MimeBodyPart textBody = new MimeBodyPart();
        textBody.setContent(body, "text/html;charset=gbk");
        contentMulti.addBodyPart(textBody);

        // 正文的图片部分
        MimeBodyPart jpgBody = new MimeBodyPart();
        FileDataSource fds = new FileDataSource(fileName);
        jpgBody.setDataHandler(new DataHandler(fds));
        jpgBody.setContentID("logo_jpg");
        contentMulti.addBodyPart(jpgBody);

        // 将上面"related"型的 MimeMultipart 对象作为邮件的正文
        contentBody.setContent(contentMulti);
        return contentBody;       
}
	





}
/**
 * 将html代码中的标签去掉
 */
class Html2Text extends HTMLEditorKit.ParserCallback {
	/*public static void main(String[] args) {
		String text = Html2Text.getContent("<p>hgahah</p>");
		
	System.out.println(text);
		
	}*/

	    public static Html2Text html2Text = new Html2Text();

	    StringBuffer s;

	    public Html2Text() {
	    	

	    }

	    public void parse(String str) throws IOException {

	        InputStream iin = new ByteArrayInputStream(str.getBytes());
	        Reader in = new InputStreamReader(iin);
	        s = new StringBuffer();
	        ParserDelegator delegator = new ParserDelegator();
	        // the third parameter is TRUE to ignore charset directive
	        delegator.parse(in, this, Boolean.TRUE);
	        iin.close();
	        in.close();
	    }

	    public void handleText(char[] text, int pos) {
	        s.append(text);
	    }

	    public String getText() {
	        return s.toString();
	    }

	    public static String getContent(String str) {
	        try {
	            html2Text.parse(str);
	        } catch (IOException e) {
	            // TODO Auto-generated catch block
	            e.printStackTrace();
	        }
	        return html2Text.getText();
	    }
	}

	