package com.thinkgem.jeesite.test.web;

import com.google.common.collect.Lists;
import com.thinkgem.jeesite.common.beanvalidator.BeanValidators;
import com.thinkgem.jeesite.common.config.Global;
import com.thinkgem.jeesite.common.persistence.Page;
import com.thinkgem.jeesite.common.utils.DateUtils;
import com.thinkgem.jeesite.common.utils.StringUtils;
import com.thinkgem.jeesite.common.utils.excel.ExportExcel;
import com.thinkgem.jeesite.common.utils.excel.ImportExcel;
import com.thinkgem.jeesite.common.web.BaseController;
import com.thinkgem.jeesite.modules.sys.entity.User;
import com.thinkgem.jeesite.modules.sys.service.SystemService;
import com.thinkgem.jeesite.modules.sys.utils.UserUtils;
import com.thinkgem.jeesite.modules.test.entity.Test;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.ConstraintViolationException;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;


import com.thinkgem.jeesite.test.entity.TestMeet;
import com.thinkgem.jeesite.test.entity.TestStation;
import com.thinkgem.jeesite.test.service.TestMeetService;
import com.thinkgem.jeesite.test.service.TestStationService;

@Controller
@RequestMapping(value="${adminPath}/test/testMeet")
public class TestMeetController extends BaseController {
    @Autowired
    private TestMeetService testMeetService;
    @Autowired
    private TestStationService testStationService;
	private Object systemService;
    
    @ModelAttribute
	public TestMeet get(@RequestParam(required=false) String id) {
		TestMeet entity = null;
		if (StringUtils.isNotBlank(id)){
			entity = testMeetService.get(id);
		}
		if (entity == null){
			entity = new TestMeet();
		}
		return entity;
	}
    
    @RequiresPermissions("test:testMeet:view")
    @RequestMapping(value= {"list", ""})
    public String list(TestMeet testMeet, HttpServletRequest request, HttpServletResponse response, Model model) {
		Page<TestMeet> page = testMeetService.findPage(new Page<TestMeet>(request, response), testMeet); 
		model.addAttribute("page", page);
		return "jeesite/test/testMeetList";
		
	}
    private void loadStation(Model model) {
		TestStation testStation =new TestStation();
		testStation.setStatus("1");
		List<TestStation>_l=testStationService.findList(testStation);
		model.addAttribute("stations",_l);
    }

	@RequiresPermissions("test:testMeet:view")
	@RequestMapping(value = "form")
	public String form(TestMeet testMeet, Model model) {
		model.addAttribute("testMeet", testMeet);
		return "jeesite/test/testMeetForm";
	}
	
	@RequiresPermissions("test:testMeet:edit")
	@RequestMapping(value = "save")
	public String save(TestMeet testMeet, Model model, RedirectAttributes redirectAttributes) {
		if (!beanValidator(model, testMeet)){
			return form(testMeet, model);
		}
		testMeetService.save(testMeet);
		addMessage(redirectAttributes, "保存成功");
		return "redirect:"+Global.getAdminPath()+"/test/testMeet/list?repage";
	}
	
	@RequiresPermissions("test:testMeet:edit")
	@RequestMapping(value = "delete")
	public String delete(TestMeet testMeet, RedirectAttributes redirectAttributes) {
		testMeetService.delete(testMeet);
		addMessage(redirectAttributes, "删除成功");
		return "redirect:"+Global.getAdminPath()+"/test/testMeet/?repage";
	}
	/**
	 * 导出用户数据
	 * @param user
	 * @param request
	 * @param response
	 * @param redirectAttributes
	 * @return
	 */
	@RequiresPermissions("test:testMeet:view")
    @RequestMapping(value = "export", method=RequestMethod.POST)
    public String exportFile(User user, HttpServletRequest request, HttpServletResponse response, RedirectAttributes redirectAttributes) {
		try {
            String fileName = "会议数据"+DateUtils.getDate("yyyyMMddHHmmss")+".xlsx";
            Page<TestMeet> page = TestMeet.findPage(new Page<TestMeet>(request, response, -1), testMeetService);
    		new ExportExcel("会议数据", TestMeet.class).setDataList(page.getList()).write(response, fileName).dispose();
    		return null;
		} catch (Exception e) {
			addMessage(redirectAttributes, "导出会议信息失败！失败信息："+e.getMessage());
		}
		return "redirect:" + adminPath + "/test/testMeet/list?repage";
    }
	/**
	 * 导入用户数据
	 * @param file
	 * @param redirectAttributes
	 * @return
	 */
	@RequiresPermissions("test:testMeet:edit")
    @RequestMapping(value = "import", method=RequestMethod.POST)
    public String importFile(MultipartFile file, RedirectAttributes redirectAttributes) {
		if(Global.isDemoMode()){
			addMessage(redirectAttributes, "演示模式，不允许操作！");
			return "redirect:" + adminPath + "/test/testMeet/list?repage";
		}
		try {
			int successNum = 0;
			int failureNum = 0;
			StringBuilder failureMsg = new StringBuilder();
			ImportExcel ei = new ImportExcel(file, 1, 0);
			List<TestMeet> list = ei.getDataList(TestMeet.class); //从Excel表里加载数据，右边是数据库
			for (TestMeet testMeet : list){                //
				try{
						testMeetService.save(testMeet);
						successNum++;
				}catch(ConstraintViolationException ex){
					failureMsg.append("<br/>姓名 "+testMeet.getName()+" 导入失败：");
					List<String> messageList = BeanValidators.extractPropertyAndMessageAsList(ex, ": ");  //告诉你出错原因
					for (String message : messageList){
						failureMsg.append(message+"; ");
						failureNum++;
					}
				}catch (Exception ex) {
					failureMsg.append("<br/>登录名 "+testMeet.getLoginName()+" 导入失败："+ex.getMessage());
				}
			}
			if (failureNum>0){
				failureMsg.insert(0, "，失败 "+failureNum+" 条用户，导入信息如下：");
			}
			addMessage(redirectAttributes, "已成功导入 "+successNum+" 条用户"+failureMsg);
		} catch (Exception e) {
			addMessage(redirectAttributes, "导入用户失败！失败信息："+e.getMessage());
		}
		return "redirect:" + adminPath + "/test/testMeet/list?repage";
    }
	
	private Object checkLoginName(String string, Object loginName) {
		// TODO Auto-generated method stub
		return null;
	}

	/**
	 * 下载导入用户数据模板
	 * @param response
	 * @param redirectAttributes
	 * @return
	 */
	@RequiresPermissions("test:testMeet:view")
    @RequestMapping(value = "import/template")
    public String importFileTemplate(HttpServletResponse response, RedirectAttributes redirectAttributes) {
		try {
            String fileName = "报名信息导入模板.xlsx";
    		List<TestMeet> list = Lists.newArrayList(); 
    		TestMeet testMeet = new TestMeet();
    		testMeet.setDepart("信息管理学院");
    		testMeet.setName("张三");
    		testMeet.setNum("1");
    		testMeet.setRemarks("1");
    		testMeet.setTel("18978395032");
    		testMeet.setTimex(10);
    		list.add(testMeet);
    		new ExportExcel("用户数据", TestMeet.class, 2).setDataList(list).write(response, fileName).dispose();
    		return null;
		} catch (Exception e) {
			addMessage(redirectAttributes, "导入模板下载失败！失败信息："+e.getMessage());
		}
		return "redirect:" + adminPath + "/test/testMeet/list?repage";
    }

	
}
